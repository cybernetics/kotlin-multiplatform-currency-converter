plugins {
    id 'kotlin-multiplatform'
    id 'org.jetbrains.dokka' version '0.9.18'
}

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64
        fromPreset(iOSTarget, 'iOS') {
            binaries {
                framework('CurrencyConverterCore')
            }
        }

        fromPreset(presets.jvm, 'android')
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation project(':rate-provider-mock')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
    }
}

dokka {
    impliedPlatforms = ["Common"]
    kotlinTasks { [] }
    outputFormat = 'html'
    outputDirectory = "./javadoc/common"
    sourceRoot {
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }

}

configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.iOS.binaries.getFramework("CurrencyConverterCore", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

task copyFrameworkToIosDir(type: Copy) {
    from "${buildDir}/xcode-frameworks"
    into '../iOS/cc-frameworks/core/v1-0'
}

tasks.build.dependsOn packForXCode